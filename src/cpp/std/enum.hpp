///
// @author      : Ruan E. Formigoni (ruanformigoni@gmail.com)
// @file        : enum
///

#pragma once

// Get size of __VA_ARGS__
#define VA_SIZE(...) VA_SIZE_(__VA_ARGS__,VA_SIZE_RSEQ())
#define VA_SIZE_(...) VA_SIZE_SEQ(__VA_ARGS__)
#define VA_SIZE_SEQ( \
   _1, _2, _3, _4, _5, _6, _7, _8, _9,_10, \
  _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \
  _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \
  _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \
  _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \
  _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \
  _61,_62,_63,N,...) N
#define VA_SIZE_RSEQ() \
  63,62,61,60,                   \
  59,58,57,56,55,54,53,52,51,50, \
  49,48,47,46,45,44,43,42,41,40, \
  39,38,37,36,35,34,33,32,31,30, \
  29,28,27,26,25,24,23,22,21,20, \
  19,18,17,16,15,14,13,12,11,10, \
  9,8,7,6,5,4,3,2,1,0

// Pop front of __VA_ARGS__
#define VA_DROP(x,...) __VA_ARGS__

// Create a case statement for enum to string
#define ENUM_TO_STRING_EXPR(NAME,value) case enum_t::value: return #value;
#define ENUM_CASE_TO_STRING_0(NAME,x)     ENUM_TO_STRING_EXPR(NAME,x)
#define ENUM_CASE_TO_STRING_1(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_0(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_2(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_1(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_3(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_2(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_4(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_3(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_5(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_4(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_6(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_5(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_7(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_6(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_8(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_7(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_9(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_8(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_10(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_9(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_11(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_10(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_12(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_11(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_13(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_12(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_14(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_13(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_15(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_14(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_16(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_15(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_17(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_16(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_18(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_17(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_19(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_18(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_20(NAME,x,...) ENUM_TO_STRING_EXPR(NAME,x) ENUM_CASE_TO_STRING_19(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING_IMPL(i,NAME,...) ENUM_CASE_TO_STRING_##i(NAME,__VA_ARGS__)
#define ENUM_CASE_TO_STRING(i,NAME,...) ENUM_CASE_TO_STRING_IMPL(i,NAME,__VA_ARGS__)

// Create a case statement for string to enum
#define ENUM_FROM_STRING_EXPR(NAME,value) if ( str_enum == #value ) { m_current = value; return; }
#define ENUM_CASE_FROM_STRING_0(NAME,x)     ENUM_FROM_STRING_EXPR(NAME,x)
#define ENUM_CASE_FROM_STRING_1(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_0(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_2(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_1(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_3(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_2(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_4(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_3(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_5(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_4(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_6(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_5(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_7(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_6(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_8(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_7(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_9(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_8(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_10(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_9(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_11(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_10(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_12(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_11(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_13(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_12(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_14(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_13(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_15(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_14(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_16(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_15(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_17(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_16(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_18(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_17(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_19(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_18(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_20(NAME,x,...) ENUM_FROM_STRING_EXPR(NAME,x) ENUM_CASE_FROM_STRING_19(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING_IMPL(i,NAME,...) ENUM_CASE_FROM_STRING_##i(NAME,__VA_ARGS__)
#define ENUM_CASE_FROM_STRING(i,NAME,...) ENUM_CASE_FROM_STRING_IMPL(i,NAME,__VA_ARGS__)

// Create a static member entry
#define ENUM_TO_MEMBER_EXPR(NAME,value) static enum_t const value;
#define ENUM_TO_MEMBER_0(NAME,x)     ENUM_TO_MEMBER_EXPR(NAME,x)
#define ENUM_TO_MEMBER_1(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_0(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_2(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_1(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_3(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_2(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_4(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_3(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_5(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_4(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_6(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_5(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_7(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_6(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_8(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_7(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_9(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_8(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_10(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_9(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_11(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_10(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_12(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_11(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_13(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_12(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_14(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_13(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_15(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_14(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_16(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_15(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_17(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_16(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_18(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_17(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_19(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_18(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_20(NAME,x,...) ENUM_TO_MEMBER_EXPR(NAME,x) ENUM_TO_MEMBER_19(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER_IMPL(i,NAME,...) ENUM_TO_MEMBER_##i(NAME,__VA_ARGS__)
#define ENUM_TO_MEMBER(i,NAME,...) ENUM_TO_MEMBER_IMPL(i, NAME, __VA_ARGS__)

// Initialize the static member entry
#define ENUM_STATIC_INIT_EXPR(NAME,value) inline NAME::enum_t const NAME::value = NAME::enum_t::value;
#define ENUM_STATIC_INIT_0(NAME,x)     ENUM_STATIC_INIT_EXPR(NAME,x)
#define ENUM_STATIC_INIT_1(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_0(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_2(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_1(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_3(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_2(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_4(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_3(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_5(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_4(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_6(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_5(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_7(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_6(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_8(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_7(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_9(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_8(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_10(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_9(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_11(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_10(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_12(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_11(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_13(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_12(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_14(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_13(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_15(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_14(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_16(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_15(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_17(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_16(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_18(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_17(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_19(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_18(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_20(NAME,x,...) ENUM_STATIC_INIT_EXPR(NAME,x) ENUM_STATIC_INIT_19(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT_IMPL(i,NAME,...) ENUM_STATIC_INIT_##i(NAME,__VA_ARGS__)
#define ENUM_STATIC_INIT(i,NAME,...) ENUM_STATIC_INIT_IMPL(i, NAME, __VA_ARGS__)

#define ENUM(NAME, ...) \
struct NAME \
{ \
  public: \
    enum class enum_t : int { __VA_ARGS__ }; \
  private: \
    enum_t m_current; \
  public: \
    size_t const size = VA_SIZE(__VA_ARGS__); \
    ENUM_TO_MEMBER(VA_SIZE(VA_DROP(__VA_ARGS__)), NAME, __VA_ARGS__) \
    NAME() = default;\
    NAME(NAME const&) = default;\
    NAME(NAME&&) = default;\
    NAME(enum_t entry) : m_current(entry) {}\
    NAME(std::string str_enum) \
    { \
      std::ranges::transform(str_enum, str_enum.begin(), [](char c){ return std::toupper(c); }); \
      ENUM_CASE_FROM_STRING(VA_SIZE(VA_DROP(__VA_ARGS__)), NAME, __VA_ARGS__) \
      std::stringstream ss; \
      ss << "Could not determine enum entry from '" << str_enum << "'"; \
      throw std::runtime_error(ss.str()); \
    } \
    operator enum_t() const \
    { \
      return m_current; \
    } \
    operator std::string() const \
    { \
      switch(m_current) \
      { \
        ENUM_CASE_TO_STRING(VA_SIZE(VA_DROP(__VA_ARGS__)), NAME, __VA_ARGS__) \
      } \
      throw std::runtime_error("Could not match enum entry to convert to string"); \
    } \
    bool operator<(NAME const& other) const \
    { \
      return this->m_current < other.m_current; \
    } \
    bool operator==(enum_t const& enum_value) const \
    { \
      return m_current == enum_value; \
    } \
    NAME& operator=(NAME const& other) { m_current = other.m_current; return *this; }\
    NAME& operator=(NAME&& other) { m_current = other.m_current; return *this; }\
    enum_t operator=(enum_t const& other) \
    { \
      m_current = other;\
      return other; \
    } \
}; \
ENUM_STATIC_INIT(VA_SIZE(VA_DROP(__VA_ARGS__)), NAME, __VA_ARGS__)

/* vim: set expandtab fdm=marker ts=2 sw=2 tw=100 et :*/
